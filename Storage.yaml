id: storage
name: Storage
subtitle: Storing Persistent Data
ordering:
    - Pasteboard
    - Saving and Reading Assets
    - Local Storage
    - Project Storage
    - Global Storage
    - Project Tabs
functions:   
#---------------------------------
# pasteboard.copy
#---------------------------------
- category: function
  description: This function copies either image or text data to the system pasteboard. It can then be
    pasted elsewhere or read back into Codea using the `pasteboard.text` and `pasteboard.image` values.
  examples:
  - example: |
      -- Copy some text to the pasteboard
      pasteboard.copy( "Some text" )
      
      -- Read the text back out
      print( pasteboard.text )
  group: Pasteboard
  id: pasteboard.copy
  name: pasteboard.copy( text )
  parameters:
  - description: string, text to be copied to the pasteboard
    name: text
  - description: image, image data to be copied to the pasteboard, such as image data
      returned by `readImage` or the `image()` function
    name: image
  related:
  - pasteboard.text
  - pasteboard.image
  syntax: |
    pasteboard.copy( text )
    pasteboard.copy( image )
#---------------------------------

#---------------------------------
# pasteboard.text
#---------------------------------
- category: const
  description: This value specifies any text that has been copied to the system pasteboard.
    It is nil if there is no text data on the pasteboard.
    

    You may also assign text to this value, which is identical to calling `pasteboard.copy( text )`.
  examples:
  - example: |
      -- Check if we have text
      if pasteboard.text then
          -- Print text
          print( pasteboard.text )
      end
  - example: |
      -- Copy some text to the pasteboard
      pasteboard.text = "Hello Pasteboard"
  group: Pasteboard
  id: pasteboard.text
  name: pasteboard.text
  related:
  - pasteboard.copy
  - pasteboard.image
  returns: Text currently on the system pasteboard, nil if there is none.
  syntax: |
    text = pasteboard.text
#---------------------------------

#---------------------------------
# pasteboard.image
#---------------------------------
- category: const
  description: This value specifies an image that has been copied to the system pasteboard.
    It is nil if there is no image data on the pasteboard.
    
    
    You may also assign an `image` to this value, which is identical to calling `pasteboard.copy( image )`.
  examples:
  - example: |
      -- Check if we have an image
      if pasteboard.image then
          -- Render image
          sprite( pasteboard.image, WIDTH/2, HEIGHT/2 )
      end
  - example: |
      -- Copy an image to the pasteboard
      local img = image(100,100)
      pasteboard.image = img
  group: Pasteboard
  id: pasteboard.image
  name: pasteboard.image
  related:
  - pasteboard.copy
  - pasteboard.text
  returns: Image currently on the system pasteboard, nil if there is none.
  syntax: |
    img = pasteboard.image
#---------------------------------

#---------------------------------
# readImage
#---------------------------------
- category: function
  description: This function reads a stored sprite (i.e., a sprite that is visible
    in the asset picker) into an image type. You can read from the included asset
    packs, or your Documents and Dropbox asset packs.
    
    
    The `width` and `height` parameters are *only* used for vector sprites. These tell
    Codea what resolution to rasterize the sprite at. If they are not specified, then
    the sprite is rendered at the size specified in the vector source file. If only
    the width is specified, the height is computed based on the aspect ratio.
  examples:
  - example: |
      -- Read a sprite into an image
      myImage = readImage("Planet Cute:Heart")
  group: Saving and Reading Assets
  id: readImage
  name: readImage( assetKey )
  parameters:
  - description: string, name of sprite pack and sprite, separated by a colon (e.g.,
      "Documents:MySprite")
    name: assetKey
  - description: int, for vector sprites only. The desired width at which the vector sprite
      is to be rendered.
    name: width
  - description: int, for vector sprites only. The desired height at which the vector sprite
      is to be rendered.
    name: height
  - description: int, for multi-page vector sprites only. Selects the page (starting at 1) 
      of the vector sprite to render as an image. To get the number of pages, use `spriteSize`.
    name: page
  related:
  - saveImage
  - image
  - spriteList
  returns: The image associated with **assetKey** or **nil** if **assetKey**
    doesn't exist or is invalid.
  syntax: |
    readImage( assetKey )
    readImage( assetKey, width )
    readImage( assetKey, width, height )
    readImage( assetKey, width, height, page )
#---------------------------------
      
#---------------------------------
# saveImage
#---------------------------------    
- category: function
  description: >
    This function saves an image into an asset pack. Only user asset
    packs (**Documents** and **Dropbox**) are permitted for this operation.
    If an existing sprite exists under the **assetKey** name it will be overwritten,
    if **nil** is specified for the **image** parameter then the sprite at
    **assetKey** will be deleted.
    

    Note that if you are using a retina
    device, two files will be saved when using this function. A retina sized image
    with an "@2x" suffix, and a 50% scale non-retina image.
    

    Note that
    if you save an image to your **Dropbox** asset pack then you will have to
    open the asset picker and sync your Dropbox asset pack in order for the image
    to be uploaded to your Dropbox account.
  examples:
  - example: |
      -- Save a sprite into documents
      function setup()
          myImage = image(400,400)
          
          setContext(myImage)
          background(0,0,0,0)
          fill(255,0,0)
          ellipse(200,200,200)
          setContext()
          
          saveImage('Documents:Circle',myImage)
      end
  group: Saving and Reading Assets
  id: saveImage
  name: saveImage( assetKey, image )
  parameters:
  - description: string, name of sprite pack and sprite, separated by a colon (e.g.,
      "Documents:MySprite")
    name: assetKey
  - description: image, the image to be saved under **assetKey**
    name: image
  related:
  - readImage
  - image
  - spriteList
  syntax: saveImage( assetKey, image )
#---------------------------------
      
#---------------------------------
# assetList
#---------------------------------    
- category: function
  description: >
    This function returns a list of the names of assets contained
    in the asset pack specified by **assetPackName**. For example, calling
    **assetList( "Documents" )** would return an array of the assets stored
    in your documents directory.
    
    
    An arbitrary number of types can be specified after the initial argument.
    This allows you to filter the results to show only a specific type (or types)
    of assets. For example, **assetList( "Documents", SPRITES )** would return
    an array of the sprite assets stored in your documents directory.
    
    
    Types can be any of the following constants: `SPRITES`, `SHADERS`, `TEXT`,
    `SOUNDS`, or `MUSIC`.
  group: Saving and Reading Assets
  id: assetList
  name: assetList( assetPackName )
  parameters:
  - description: string, name of the asset pack. For example, "Documents", "Dropbox",
      "Planet Cute"
    name: assetPackName
  - description: string, the type of assets to list, can be `SPRITES`, `SHADERS`, `TEXT`, `SOUNDS`, or `MUSIC`
    name: type
  related:
  - readImage
  - saveImage
  - image
  - SPRITES
  - SHADERS
  - TEXT
  - SOUNDS
  - MUSIC
  returns: An array of strings listing the assets stored in the specified asset
    pack.
  syntax: |
    assetList( assetPackName )
    assetList( assetPackName, type )
    assetList( assetPackName, type1, type2, ... )
#---------------------------------

#---------------------------------
# readText
#---------------------------------
- category: function
  description: This function reads a stored plain text file into a string.
    You can read from the included asset packs, or your Documents and Dropbox asset packs.
  examples:
  - example: |
      -- Read a text file into a string
      myString = readText("Documents:MyFile")
  group: Saving and Reading Assets
  id: readText
  name: readText( assetKey )
  parameters:
  - description: string, name of asset pack and text asset, separated by a colon (e.g.,
      "Documents:MyFile")
    name: assetKey
  related:
  - saveText
  returns: The text content of **assetKey** or **nil** if **assetKey**
    doesn't exist or is invalid.
  syntax: |
    readText( assetKey )
#---------------------------------
      
#---------------------------------
# saveText
#---------------------------------    
- category: function
  description: >
    This function saves text into an asset pack. Only user asset
    packs (**Documents** and **Dropbox**) are permitted for this operation.
    If an existing asset exists under the **assetKey** name it will be overwritten,
    if **nil** is specified for the **text** parameter then the file at
    **assetKey** will be deleted.
    

    Note that
    if you save a text file to your **Dropbox** asset pack then you will have to
    open the asset picker and sync your Dropbox asset pack in order for the file
    to be uploaded to your Dropbox account.
  examples:
  - example: |
      -- Save some text content into documents
      function setup()
          myContent = "Hello World"

          saveText("Documents:Hello",myContent)
      end
  group: Saving and Reading Assets
  id: saveText
  name: saveText( assetKey, text )
  parameters:
  - description: string, name of asset pack and text asset, separated by a colon (e.g.,
      "Documents:MyFile")
    name: assetKey
  - description: string, the text contents to be saved under **assetKey**
    name: text
  related:
  - readText
  syntax: saveText( assetKey, text )
#---------------------------------

#---------------------------------
# SPRITES
#---------------------------------     
- category: const
  description: This constant specifies sprite assets
  group: Saving and Reading Assets
  id: SPRITES
  name: SPRITES
  related:
  - assetList
  syntax: SPRITES
#---------------------------------

#---------------------------------
# SHADERS
#---------------------------------     
- category: const
  description: This constant specifies shader assets
  group: Saving and Reading Assets
  id: SHADERS
  name: SHADERS
  related:
  - assetList
  syntax: SHADERS
#---------------------------------

#---------------------------------
# SOUNDS
#---------------------------------     
- category: const
  description: This constant specifies sound assets
  group: Saving and Reading Assets
  id: SOUNDS
  name: SOUNDS
  related:
  - assetList
  syntax: SOUNDS
#---------------------------------

#---------------------------------
# MUSIC
#---------------------------------     
- category: const
  description: This constant specifies music assets
  group: Saving and Reading Assets
  id: MUSIC
  name: MUSIC
  related:
  - assetList
  syntax: MUSIC
#---------------------------------

#---------------------------------
# TEXT
#---------------------------------     
- category: const
  description: This constant specifies text assets
  group: Saving and Reading Assets
  id: TEXT
  name: TEXT
  related:
  - assetList
  syntax: TEXT
#---------------------------------
      
#---------------------------------
# readLocalData
#---------------------------------    
- category: function
  description: >
    This function reads a value associated with **key** from the
    local device storage for the current project.
    

    Local storage for a
    particular project is unique to your device. That is, sharing your project will
    not share the associated data. This sort of storage is useful for things such
    as high scores, statistics, and any values you are likely to associate while
    a user is interacting with your game or simulation.
  examples:
  - example: |
      -- Load high score
      -- Defaults to 0 if it doesnt exist
      highscore = readLocalData("highscore", 0)
  group: Local Storage
  id: readLocalData
  name: readLocalData( key )
  parameters:
  - description: string, name of the piece of data you would like to get
    name: key
  - description: if the key doesn't exist, this value is returned instead
    name: defaultValue
  related:
  - saveLocalData
  - clearLocalData
  returns: The value associated with **key**, or **defaultValue** if key doesn't
    exist and **defaultValue** is specified. **nil** if **key** doesn't
    exist and **defaultValue** is not specified.
  syntax: |
    readLocalData( key )
    readLocalData( key, defaultValue )
#---------------------------------
      
#---------------------------------
# saveLocalData
#---------------------------------      
- category: function
  description: >
    This function stores a value associated with **key** in the
    local device storage for the current project.
    

    Local storage for a
    particular project is unique to your device. That is, sharing your project will
    not share the associated data. This sort of storage is useful for things such
    as high scores, statistics, and any values you are likely to associate while
    a user is interacting with your game or simulation.
  examples:
  - example: |
      -- Save high score
      saveLocalData("highscore", currentScore)
  group: Local Storage
  id: saveLocalData
  name: saveLocalData( key, value )
  parameters:
  - description: string, name of the piece of data you would like to store
    name: key
  - description: the value to store under **key**
    name: value
  related:
  - readLocalData
  - clearLocalData
  syntax: saveLocalData( key, value )
#---------------------------------
      
#---------------------------------
# listLocalData
#---------------------------------    
- category: function
  description: >
    This function returns a table containing all the keys in local
    storage.
    

    Local storage for a particular project is unique to your
    device. That is, sharing your project will not share the associated data. This
    sort of storage is useful for things such as high scores, statistics, and any
    values you are likely to associate while a user is interacting with your game
    or simulation.
  group: Local Storage
  id: listLocalData
  name: listLocalData()
  related:
  - readLocalData
  - saveLocalData
  - clearLocalData
  returns: A table containing all the keys stored in local data
  syntax: listLocalData( )
#---------------------------------
      
#---------------------------------
# clearLocalData
#---------------------------------    
- category: function
  description: >
    This function clears all local data for the current project.
    

    Local
    storage for a particular project is unique to your device. That is, sharing
    your project will not share the associated data. This sort of storage is useful
    for things such as high scores, statistics, and any values you are likely to
    associate while a user is interacting with your game or simulation.
  group: Local Storage
  id: clearLocalData
  name: clearLocalData()
  related:
  - readLocalData
  - saveLocalData
  syntax: clearLocalData( )
#---------------------------------
      
#---------------------------------
# readProjectData
#---------------------------------    
- category: function
  description: >
    This function reads a value associated with **key** from the
    project storage for the current project.
    

    Project storage is bundled
    with your project. That is, sharing your project will also share the associated
    data. This sort of storage is useful for things such procedurally generated
    levels, maps, and other static or dynamic data you may want to provide with
    your project.
  group: Project Storage
  id: readProjectData
  name: readProjectData( key )
  parameters:
  - description: string, name of the piece of data you would like to get
    name: key
  - description: if the key doesn't exist, this value is returned instead
    name: defaultValue
  related:
  - saveProjectData
  - clearProjectData
  returns: The value associated with **key**, or **defaultValue** if key doesn't
    exist and **defaultValue** is specified. **nil** if **key** doesn't
    exist and **defaultValue** is not specified.
  syntax: |
    readProjectData( key )
    readProjectData( key, defaultValue )
#---------------------------------
      
#---------------------------------
# saveProjectData
#---------------------------------      
- category: function
  description: >
    This function stores a value associated with **key** in your
    project's storage.
    

    Project storage is bundled with your project.
    That is, sharing your project will also share the associated data. This sort
    of storage is useful for things such procedurally generated levels, maps, and
    other static or dynamic data you may want to provide with your project.
  group: Project Storage
  id: saveProjectData
  name: saveProjectData( key, value )
  parameters:
  - description: string, name of the piece of data you would like to store
    name: key
  - description: the value to store under **key**
    name: value
  related:
  - readProjectData
  - clearProjectData
  syntax: saveProjectData( key, value )
#---------------------------------
      
#---------------------------------
# saveProjectInfo
#---------------------------------    
- category: function
  description: This function allows you to save metadata about your project from
    within your code. For example, you may set the description that appears on the
    Project Browser page by calling **saveProjectInfo()** with 'description'
    as the key.
  group: Project Storage
  id: saveProjectInfo
  name: saveProjectInfo( key, value )
  parameters:
  - description: string, name of the project metadata to store. Currently supports
      "Description" and "Author"
    name: key
  - description: the value to store under **key**
    name: value
  related:
  - readProjectInfo
  syntax: saveProjectInfo( key, value )
#---------------------------------
      
#---------------------------------
# readProjectInfo
#---------------------------------    
- category: function
  description: This function reads a value associated with **key** from the
    project metadata for the current project.
  group: Project Storage
  id: readProjectInfo
  name: readProjectInfo( key )
  parameters:
  - description: string, name of the piece of metadata you would like to get
    name: key
  related:
  - saveProjectInfo
  returns: The value associated with **key**, or nil if the key does not exist
  syntax: readProjectInfo( key )
#---------------------------------
      
#---------------------------------
# listProjectData
#---------------------------------    
- category: function
  description: >
    This function returns a table containing all the keys stored in
    project data.
    

    Project storage is bundled with your project. That
    is, sharing your project will also share the associated data. This sort of storage
    is useful for things such procedurally generated levels, maps, and other static
    or dynamic data you may want to provide with your project.
  group: Project Storage
  id: listProjectData
  name: listProjectData()
  related:
  - readProjectData
  - saveProjectData
  - clearProjectData
  returns: A table containing all the keys stored in project data
  syntax: listProjectData( )
#---------------------------------
      
#---------------------------------
# clearProjectData
#---------------------------------    
- category: function
  description: >
    This function clears all project-stored data.
    

    Project storage is bundled with your project. That is, sharing your project will also
    share the associated data. This sort of storage is useful for things such procedurally
    generated levels, maps, and other static or dynamic data you may want to provide
    with your project.
  group: Project Storage
  id: clearProjectData
  name: clearProjectData()
  related:
  - readProjectData
  - saveProjectData
  syntax: clearProjectData( )
#---------------------------------
      
#---------------------------------
# readGlobalData
#---------------------------------    
- category: function
  description: >
    This function reads a value associated with **key** from the
    global storage on this device.
    

    Global storage is shared among all
    projects on this device.
  group: Global Storage
  id: readGlobalData
  name: readGlobalData( key )
  parameters:
  - description: string, name of the piece of data you would like to get
    name: key
  - description: if the key doesn't exist, this value is returned instead
    name: defaultValue
  related:
  - saveGlobalData
  - clearProjectData
  returns: The value associated with **key**, or **defaultValue** if key doesn't
    exist and **defaultValue** is specified. **nil** if **key** doesn't
    exist and **defaultValue** is not specified.
  syntax: |
    readGlobalData( key )
    readGlobalData( key, defaultValue )
#---------------------------------
      
#---------------------------------
# saveGlobalData
#---------------------------------      
- category: function
  description: >
    This function stores a value associated with **key** in this
    device's global storage.
    

    Global storage is shared among all projects
    on this device.
  group: Global Storage
  id: saveGlobalData
  name: saveGlobalData( key, value )
  parameters:
  - description: string, name of the piece of data you would like to store
    name: key
  - description: the value to store under **key**
    name: value
  related:
  - readGlobalData
  syntax: saveGlobalData( key, value )
#---------------------------------
      
#---------------------------------
# listGlobalData
#---------------------------------    
- category: function
  description: >
    This function returns a table containing all the keys stored in
    global data.
    

    Global storage is shared among all projects on this
    device.
  group: Global Storage
  id: listGlobalData
  name: listGlobalData()
  related:
  - readGlobalData
  - saveGlobalData
  returns: A table containing all the keys stored in global data
  syntax: listGlobalData( )    
#---------------------------------

#---------------------------------
# readProjectTab
#---------------------------------    
- category: function
  description: >
    This function can be used to read the contents of a tab in the current project,
    or in another project. The contents of the tab are returned as a string. The
    `key` parameter specifies the tab to read, and can optionally include the project
    name to read from. If no project name is specified, the tab is read from the
    current project.
    
    
    The `key` parameter takes the form *"Project Name:Tab Name"*. *"Project Name"* specifies
    the project to read from, and *"Tab Name"* specifies the tab to read. If *"Project Name"*
    is not specified, "Tab Name" is assumed to exist in the currently running project, and is
    read from there.
    
    
    If the `key` can not be found, then an error is printed and playback is paused.
  examples:
  - example: |
      -- Read the main tab in the current project
      mainTab = readProjectTab("Main")

      -- Print the results
      print( mainTab )
  - example: |
      -- Read the main tab in a different project
      mainTab = readProjectTab("My Project:Main")

      -- Print the results
      print( mainTab )
  group: Project Tabs
  id: readProjectTab
  name: readProjectTab( key )
  parameters:
  - description: string, a key specifying the project and tab you would like to read
    name: key
  related:
  - saveProjectTab
  - listProjectTabs
  returns: A string containing the contents of the tab specified by `key`. If `key` is
    not found, returns nothing.
  syntax: |
    readProjectTab( key )
#---------------------------------
      
#---------------------------------
# saveProjectTab
#---------------------------------      
- category: function
  description: >
    This function can be used to save the contents of a tab in the current project,
    or in another user project. 
    
    
    The `key` parameter takes the form *"Project Name:Tab Name"*. *"Project Name"* specifies
    the project to save to, and *"Tab Name"* specifies the tab to write. If *"Project Name"*
    is not specified, *"Tab Name"* is assumed to exist in the currently running project.
    
    
    The `value` parameter is a string that is written to the location specified by `key`.
    If `value` is nil, then Codea will delete the tab specified by `key`.
    
    
    Please note that this function only works on user projects, and will not work on the
    built in example projects as they are read-only.
  examples:
  - example: |
      -- Create a tab named "Test"
      -- In the current project
      saveProjectTab("Test", "-- This is a test!")
  - example: |
      -- Delete the tab named "Test"
      -- In the current project
      saveProjectTab("Test", nil)
  group: Project Tabs
  id: saveProjectTab
  name: saveProjectTab( key, value )
  parameters:
  - description: string, a key specifying a project and tab
    name: key
  - description: >
      string, the contents to write into the tab specified by `key`, a value
      of `nil` deletes the tab.
    name: value
  related:
  - readProjectTab
  - listProjectTabs
  syntax: saveProjectTab( key, value )
#---------------------------------
      
#---------------------------------
# listProjectTabs
#---------------------------------    
- category: function
  description: >
    This function returns a table containing all the tabs in the specified project.
    
    
    If no argument is provided, this function will return a table containing all
    the tabs in the *currently running* project. If a value is specified for `project`
    then the tab list will be fetched from that project.
  group: Project Tabs
  id: listProjectTabs
  name: listProjectTabs()
  parameters:
  - description: string, the name of a project to retrieve tabs from
    name: project
  related:
  - readProjectTab
  - saveProjectTab
  returns: A table containing all the tabs in the specified project
  syntax: |
    listProjectTabs( )
    listProjectTabs( project )
#---------------------------------